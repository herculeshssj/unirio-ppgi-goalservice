/* 
 * QoS Discovery Component
 * Copyright (C) 2006 Sebastian Gerlach
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

package ch.epfl.qosdisc.operators;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.PropertyConfigurator;
import org.deri.wsmo4j.io.serializer.wsml.VisitorSerializeWSMLTerms;
import org.omwg.logicalexpression.LogicalExpression;
import org.omwg.logicalexpression.terms.Term;
import org.omwg.ontology.Ontology;
import org.omwg.ontology.Variable;
import org.wsml.reasoner.api.WSMLReasoner;
import org.wsml.reasoner.api.WSMLReasonerFactory;
import org.wsml.reasoner.impl.DefaultWSMLReasonerFactory;
import org.wsml.reasoner.impl.WSMO4JManager;
import org.wsmo.common.IRI;
import org.wsmo.factory.LogicalExpressionFactory;

/**
 * Test class for WSMLReasoner.
 * 
 * @author Sebastian Gerlach
 */
public class TestReasoner {
    
    /**
     * Logical expression factory.
     */
    LogicalExpressionFactory leFactory;
    
    /**
     * Example ontology.
     */
    Ontology exampleOntology;
        
    /**
     * The reasoner. 
     */
    WSMLReasoner reasoner;

    /**
     * A simple test for the WSMLReasoner.
     * 
     * @param args Command line arguments, ignored.
     */
    public static void main(String[] args) {
        
        // Configure log4j.
        PropertyConfigurator.configure("log.properties");

        // Start execution.
        TestReasoner ex = new TestReasoner();
        ex.doTestRun();
    }
    
    /**
     * Execute a query.
     * 
     * @param queryString The query.
     */
    public void query(String queryString) {
        try {
            
            // Timing.
            long st = System.currentTimeMillis();
            
            // Execute query request.
            LogicalExpression query = leFactory.createLogicalExpression(queryString, exampleOntology);
            Set<Map<Variable, Term>> result = reasoner.executeQuery( (IRI) exampleOntology.getIdentifier(), query);

            // Timing.
            long et = System.currentTimeMillis();
    
            // Print out the results.
            System.out.println("The query '" + query + "' has the following results ("+(et-st)+" ms):");
            for (Map<Variable, Term> vBinding : result) {
                for (Variable var : vBinding.keySet()) {
                    System.out.print(var + ": " + termToString(vBinding.get(var),exampleOntology) + " / ");
                }
                System.out.println();
            }
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Loads an Ontology and performs sample query.
     */
    public void doTestRun(){
        
        // Load the ontology.
        exampleOntology = Manager.getOntology("http://localhost/ontologies/ref/fun.wsml");
        if (exampleOntology == null)
            return;
        
        // Create the logical expression factory. 
        leFactory = new WSMO4JManager().getLogicalExpressionFactory();

        // Get a reasoner.
        Map<String, Object> params = new HashMap<String, Object>();
        params.put(WSMLReasonerFactory.PARAM_BUILT_IN_REASONER, WSMLReasonerFactory.BuiltInReasoner.KAON2);
        params.put(WSMLReasonerFactory.PARAM_EVAL_METHOD, new Integer(2));
        reasoner = DefaultWSMLReasonerFactory.getFactory().createWSMLFlightReasoner(params);
        
        // And now have a go at querying!
        try {
            reasoner.registerOntology(exampleOntology);
            
//            query("MissingBound(L10,L15)");   // OK
//            query("MissingBound(L15,L10)");   // Partial
//            query("MissingBound(G15,G10)");   // OK
//            query("MissingBound(G10,G15)");   // Partial
//            query("MissingBound(L10G5,L15G0)");   // OK
//            query("MissingBound(L15G0,L10G5)");   // Partial
//            query("MissingBound(G15,L10)");   // Fail
//            query("MissingBound(L10,G15)");   // Fail
//            query("MatchBounds(L10,L15,?x)");   // OK
//            query("MatchBounds(L15,L10,?x)");   // Partial
//            query("MatchBounds(G15,G10,?x)");   // OK
//            query("MatchBounds(G10,G15,?x)");   // Partial
//            query("MatchBounds(L10G5,L15G0,?x)");   // OK
//            query("MatchBounds(L15G0,L10G5,?x)");   // Partial
//            query("MatchBounds(L5G0,L15G10,?x)");   // Fail
//            query("MatchBounds(G15,L10,?x)");   // Fail
//            query("MatchBounds(L10,G15,?x)");   // Fail
//            query("naf HasLowerBound(L15G10)");   // Fail
//            query("naf HasUpperBound(L15G10)");   // Fail
//            query("GreaterUpperBound(L5G0,L15G10)");   // Fail
//            query("MatchBounds(L20S,L1M,?x)");   // OK
//            query("?x[hasLowerBoundInRefUnit hasValue ?y] memberOf RangeBound");   // Fail
//            query("?x[hasUpperBoundInRefUnit hasValue ?y] memberOf RangeBound");   // Fail
//            query("?x memberOf RangeBound");   // Fail
//            query("?x memberOf LowerBound");   // Fail
//            query("?x memberOf ExactValue");
//            query("?x[hasResponseTime hasValue ?y] memberOf ServiceSpecCollection and ?y[hasExactValue hasValue ?t]");
//            query("MatchBounds(MyNetworkThroughput,MyServiceNetworkRequirement,?x)");
            query("SatisfiesMe(?x)");
            //query("?x[hasLowerBoundInSeconds hasValue ?v] memberOf LowerBound");   // Fail
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Convert a term to a string.
     * 
     * @param t The term.
     * @param o The ontology relative to which the conversion should be performed.
     * @return The string representation of the term.
     */
    private String termToString(Term t, Ontology o){
        
        // Use a serializing visitor for this task.
        VisitorSerializeWSMLTerms v = new VisitorSerializeWSMLTerms(o);
        t.accept(v);
        return v.getSerializedObject();
    }
}
