March 26, 2007 
Michael Stollberg 
DERI Austria 

This is the prototype for the "Semantic Discovery Caching" technique, short: SDC. 

The purpose of SDC is to realize efficient and scalable Web Service Discovery. It 
captures design time discovery results (that is: the usability of Web services for 
solving a goal template with respect to the requested and provided functionality), 
and utilizes this knowledge to enable efficient and scalable runtime discovery 
(that is: to find a Web service that is usable for a goal instance respect to the 
requested and provided functionality). 

The current version is for demonstration purpose. It uses the SWS Challenge Shipment 
scenario (http://sws-challenge.org/wiki/index.php/Scenario:_Shipment_Discovery). 
It demonstrates the achievable increase in computational efficiency and 
scalability of the discovery procedure. 


RELATED DOCUMENTS: 
(1) An overview of the idea is given in: 
Stollberg, M.: Caching for Semantic Web Service Discovery. Extended PhD Abstract. 
Submitted to the Knowledge Web PhD Symposium 2007, co-located with ESWC 2007
(2) A detailed spefication of this prototpye: 
Stollberg, M.: Semantic Discovery Caching: Capturing and Reuse of Web Service Discovery 
Results for Improving the Computational Efficiency of Service-Oriented Architectures 
(Specification). DERI Technical Report, February 03rd, 2007.
(3) Prototype & Use Case Documentation: 
TO COME SOON 


In order to get this prototype running on your local machine: 
(1) JAVA 5.0 or compatible
(2) your class / build path needs to have the AXIS2 jar files 
    (available from:  http://ws.apache.org/axis2/) 
(3) unzip the archive "resourcesSWSC.zip" to your local machine 
(4) change the following values in constructor of the "SDCResourceManager": 
   - "resourcesDirectory": change to the local directory where you 
   	 unzipped the archive to in step 3 
   - ensure that "SDCGraphLocation" points to the directory of this package 
     on your local machine 
 (5) you can use / adapt the test runs under "components/discovery/sec/unitest" 
 
 
 OVERVIEW of Prototype
 
 The SDC Graph is managed as a WSML Rule Ontology 
"SDCgraphSchema.wsml" provides the ontology schema for this 
 
PACKAGE org.deri.wsmx.discovery.caching 
 contains the main classes for the SDC technique: 
 - "SDCResourceManager": loads & stores WSML files on local machine 
 - "SDCGraphManager": basic SDC Graph management as a WSML Rule Ontology, incl.: 
 	* creation of Goal Templates and Arcs (for goal graph = GGM, for discovery cache = WGM) 
 	* routines for getting instances of an SDC Graph 
 - "SDCGraphCreator": methods for SDC Graph creation 
 	* by iterative insertion of Goal Templates 
 	* incl. the design time discovery (matchmaking of goal templates & Web services) 
 - "SDCGraphCreatorHelper": provides helper methods for the SDCGraphCreator
 - "GoalInstanceManager": creation & management of goal instances 
 - "GoalInstanceSDCDiscoverer": implements the SDC enabled runtime discovery for goal instances 
 - "SWSCComparison": discovery invocation for performance comparison: 
 	* invokes the SDC enabled runtime discovery and measures time 
 	* provides another runtime discoverer that does not make use of the SDC graph 
 
PACKAGE org.deri.wsmx.discovery.caching.matchmaking  
 contains the classes for the matchmaking. This is performed by VAMPIRE, a FOL automated theorem 
 prover developed by the University of Manchester. 
 Because VAMPIRE only runs under UNIX, it is invoked via a Web Service called "VampireInvoker" 
 (see WSDL: "http://138.232.65.138:8080/axis2/services/VampireInvoker?wsdl"). 
 This package includes all classes related to the invocation of this Web service: 
 - "POGenerator4SWSC": generates proof obligations on the client side
 	* implements the interface "POGenerator" for the SWSC shipment scenario 
 - "Matchmaking4SWSC": gets matchmaking results from Web service 
 	* implements the interface "Matchmaking" for the SWSC shipment scenario 
 - classes for the Web service: 
 	* "VampireInvoker": the service implementation 
 	* "services.xml": build information for AXIS 2 
 	* client classes generated by AXIS 2 

PACKAGE org.deri.wsmx.discovery.caching under "components/discovery/sec/unitest"
 provides tests for the prototype implementation, in particular: 
 - "SDCGraphCreation4SWSC": creates the SDC Graph for the SWSC use case 
 - "SWSCcomparisonGIcreation": creates & validates goal instances for the SWSC use case 
 - "SWCComparisonTester" runs "SWSCComparison" for 
 	* a specific goal instance 
 	* a specific number of available Web services 
 	

  
 
 
 
 		
 	  