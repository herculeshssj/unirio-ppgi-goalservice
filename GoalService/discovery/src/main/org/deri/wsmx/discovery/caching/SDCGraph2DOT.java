/**
 * creates a DOT file for visualization of SDC graphs 
 * 
 * @author Michael Stollberg
 *
 * @version $Revision: 1.2 $ $Date: 2007-10-24 14:59:47 $
 */ 

package org.deri.wsmx.discovery.caching;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.apache.log4j.Logger;
import org.omwg.ontology.Instance;
import org.omwg.ontology.Ontology;
import org.omwg.ontology.Value;
import org.wsmo.common.IRI;
import org.wsmo.common.TopEntity;
import org.wsmo.factory.Factory;
import org.wsmo.factory.WsmoFactory;
import org.wsmo.service.Goal;
import org.wsmo.service.WebService;

public class SDCGraph2DOT {
	
 	protected static Logger logger;
	private WsmoFactory wsmoFactory;
	private SDCGraphManager sdcGraphManager;  
	private SDCResourceManager sdcResourceManager; 

	public SDCGraph2DOT(){
		wsmoFactory = Factory.createWsmoFactory(null);
		logger = Logger.getLogger(SDCGraph2DOT.class);
		sdcGraphManager = new SDCGraphManager(); 
		sdcResourceManager = new SDCResourceManager(); 
	}
	
	public Goal getGoalFromSDCGraphInstance(Instance gtInstance, Ontology sdcGraph) {
		
		Goal theGoal = null;
		
		Set<String> theIDs = new HashSet<String>();
		Set<Value> temp2 = gtInstance.listAttributeValues(wsmoFactory.createIRI(
				sdcGraph.getDefaultNamespace(), "description"));
		for (Value v: temp2)
			theIDs.add(v.toString());
		
//		Set<String> theIDs = aGT.listAttributeValues(wsmoFactory.createIRI(
//				sdcGraph.getDefaultNamespace(), "description"));
		Iterator theIDsIterator = theIDs.iterator();
		String theGoalID = theIDsIterator.next().toString(); 
		theGoal = wsmoFactory.createGoal(wsmoFactory.createIRI(theGoalID)); 
		
		return theGoal; 
		 
	}
	
	private String getName (TopEntity element) {
				
		IRI fullID = (IRI) element.getIdentifier();
    	String LocalID = fullID.getLocalName(); 
    	
    	int indexOfDot = LocalID.indexOf('.');
    	
    	String localName = LocalID.substring(0, indexOfDot); 
		return localName; 
		
	}
			
	public void createDOT (String sdcGraphDirectory, String sdcGraphFile, String outputDirectory, String outputFile) {
		
		Ontology sdcGraph = sdcResourceManager.loadSDCGraph(sdcGraphDirectory, sdcGraphFile);
		
		logger.info("creation of DOT file for SDC graph: " + sdcGraph.getIdentifier()); 
		
		// get all goal templates 
		List<Instance> theGoalTemplateInstances = sdcGraphManager.getAllGoalTemplates(sdcGraph);
		
		List<Goal> theGoalTemplates = new ArrayList<Goal>();
		for (Instance aGTinstance : theGoalTemplateInstances) {
			Goal aGT = getGoalFromSDCGraphInstance(aGTinstance, sdcGraph); 
			theGoalTemplates.add(aGT);
		}
			
		
        File dataFile = new File(outputDirectory, outputFile + ".dot");
        
        BufferedWriter bwData;

        try {
		
		bwData = new BufferedWriter(new FileWriter(dataFile));		
     
        bwData.write("// GENERATED by " + this.getClass().getName().toString() + " \n \n" );

		bwData.write("digraph sdcGraph { \n");
        
        // entries for a single goal template 
        for ( Goal goalTemplate : theGoalTemplates ) {
        	
        	String gtLocalName = null; 
        	
        	if ( sdcGraphManager.isIntersectionGT(goalTemplate, sdcGraph) ) {
        		gtLocalName = "iGT"; 
        	} else {
        		gtLocalName = getName(goalTemplate);	
        	}        	       	 
        	       	          
            bwData.write("  " + gtLocalName + " [label=\"" + gtLocalName +"\"];" + "\n");
            
            bwData.write("  " + gtLocalName + "dc [shape=record,fontsize=8,label=\"{");
            
    		List<Instance> DCarcsOfGT = sdcGraphManager.getDiscoveryCacheBySource(goalTemplate, sdcGraph);
    		
    		int count = 0; 
    		
    		for (Instance aDCarc : DCarcsOfGT) {
    			
    			count = count + 1; 
    			
    			WebService aUsableWS = sdcGraphManager.getDiscoveryCacheArcTarget(sdcGraph, aDCarc); 
    			
    			String wsLocalName = getName(aUsableWS);
    			
    			
    			Set<Value> theDegrees = aDCarc.listAttributeValues(
    					wsmoFactory.createIRI(sdcGraph.getDefaultNamespace(), "usability"));
    			
    			Instance theDegree = (Instance) theDegrees.iterator().next();     			
    			String usabilityDegreeFull = theDegree.getIdentifier().toString();
    			
    			int indexOfHash = usabilityDegreeFull.indexOf('#');
    			
    			String usabilityDegree = usabilityDegreeFull.substring(indexOfHash + 1);
    			
    			if ( count == DCarcsOfGT.size() ) {

                	bwData.write(wsLocalName + ": " + usabilityDegree );
    				
    			} else {

    				bwData.write(wsLocalName + ": " + usabilityDegree + " | ");
    				
    			}   			
            	
    		}
    		
            bwData.write("}\"]; \n");
            bwData.write("  " + gtLocalName + " -> " + gtLocalName + "dc [fontsize=10]; \n \n");
    		
        }

        bwData.write("  // goal graph arcs \n");
        
		// get goal graph arcs for a goal template 
		List<Instance> GGarcs = sdcGraphManager.getAllGoalGraphArcs(sdcGraph); 
		
		for (Instance aGGarc : GGarcs) {
			        	
			Goal sourceGoal = sdcGraphManager.getGoalGraphArcSource(sdcGraph, aGGarc);
			String sourceGTlocalName = null; 
        	if ( sdcGraphManager.isIntersectionGT(sourceGoal, sdcGraph) ) {
        		sourceGTlocalName = "iGT"; 
        	} else {
        		sourceGTlocalName = getName(sourceGoal);	
        	}        	       	 

			Goal targetGoal = sdcGraphManager.getGoalGraphArcTarget(sdcGraph, aGGarc); 
			String targetGTlocalName = null; 
        	if ( sdcGraphManager.isIntersectionGT(targetGoal, sdcGraph) ) {
        		targetGTlocalName = "iGT"; 
        	} else {
        		targetGTlocalName = getName(targetGoal);	
        	}        	       	 
			
            bwData.write("  " + sourceGTlocalName + " -> " + targetGTlocalName + " [style=bold]; \n");	
			
		}

        bwData.write(" \n } \n ");

        bwData.flush();
        bwData.close();

		} catch (IOException e) {
			e.printStackTrace();
		}

		logger.info("successfully created " + outputFile + ".dot"); 
	}


}
